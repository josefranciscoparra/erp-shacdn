// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== SPRINT 0: MODELOS BÁSICOS ====================
// Empezamos solo con lo mínimo para autenticación y multi-tenancy

model Organization {
  id        String   @id @default(cuid())
  name      String
  vat       String?  @unique // NIF de empresa
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Configuración de PTO (Vacaciones)
  annualPtoDays        Int     @default(23) // Días de vacaciones anuales por defecto
  ptoCalculationMethod String  @default("PROPORTIONAL") // PROPORTIONAL, FIXED
  ptoAccrualStartDate  String  @default("CONTRACT_START") // CONTRACT_START, YEAR_START

  // Relaciones
  users               User[]
  employees           Employee[]
  costCenters         CostCenter[]
  departments         Department[]
  positions           Position[]
  positionLevels      PositionLevel[]
  employmentContracts EmploymentContract[]
  employeeDocuments   EmployeeDocument[]
  temporaryPasswords  TemporaryPassword[]
  calendars           Calendar[]
  timeClockTerminals  TimeClockTerminal[]
  timeEntries         TimeEntry[]
  workdaySummaries    WorkdaySummary[]
  absenceTypes        AbsenceType[]
  ptoBalances         PtoBalance[]
  ptoRequests         PtoRequest[]
  ptoNotifications    PtoNotification[]

  @@map("organizations")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String
  name             String
  role             Role      @default(EMPLOYEE)
  emailVerified    DateTime?
  image            String?
  active           Boolean   @default(true)
  mustChangePassword Boolean @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relaciones
  sessions           Session[]
  employee           Employee?           // Un usuario puede estar vinculado a un empleado
  uploadedDocuments  EmployeeDocument[]  // Documentos que ha subido
  temporaryPasswords TemporaryPassword[] // Contraseñas temporales generadas para este usuario
  createdTempPasswords TemporaryPassword[] @relation("CreatedBy") // Contraseñas temporales que ha creado
  approvedPtoRequests PtoRequest[]        @relation("PtoApprover") // Solicitudes que ha aprobado/rechazado
  ptoNotifications   PtoNotification[]   // Notificaciones recibidas

  @@index([email])
  @@index([orgId])
  @@map("users")
}

// Sesiones para NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// Roles básicos del sistema
enum Role {
  SUPER_ADMIN // Super administrador (multi-org)
  ORG_ADMIN   // Administrador de organización
  HR_ADMIN    // RRHH
  MANAGER     // Manager/Supervisor
  EMPLOYEE    // Empleado básico
}

// ==================== SPRINT 1: MODELOS DE RRHH ====================

// Centro de coste - Ubicaciones físicas donde trabajar
model CostCenter {
  id        String   @id @default(cuid())
  name      String
  code      String?  // Código interno del centro
  address   String?
  timezone  String   @default("Europe/Madrid")
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relaciones
  departments        Department[]
  employmentContracts EmploymentContract[]
  calendars          Calendar[]
  timeClockTerminals TimeClockTerminal[]

  @@index([orgId])
  @@map("cost_centers")
}

// Departamento - División organizativa
model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relación con centro de coste
  costCenterId String?
  costCenter   CostCenter? @relation(fields: [costCenterId], references: [id])

  // Responsable del departamento
  managerId String?
  manager   Employee? @relation("DepartmentManager", fields: [managerId], references: [id])

  // Relaciones
  employmentContracts EmploymentContract[]

  @@index([orgId])
  @@index([managerId])
  @@map("departments")
}

// Nivel de puesto - Jerarquía organizacional
model PositionLevel {
  id          String   @id @default(cuid())
  name        String   // "Junior", "Mid", "Senior", "Lead", "Principal"
  code        String?  // Código interno opcional (ej: "L1", "L2", "L3")
  order       Int      @default(0) // Orden jerárquico (1=más bajo, 10=más alto)
  description String?  // Descripción del nivel

  // Rangos salariales opcionales
  minSalary   Decimal? @db.Decimal(10, 2)
  maxSalary   Decimal? @db.Decimal(10, 2)

  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relaciones
  positions Position[]

  @@unique([orgId, name]) // No duplicar niveles en la misma organización
  @@index([orgId])
  @@index([order])
  @@map("position_levels")
}

// Posición/Puesto de trabajo
model Position {
  id          String   @id @default(cuid())
  title       String   // Título del puesto
  description String?  // Descripción del puesto
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relación con nivel jerárquico
  levelId String?
  level   PositionLevel? @relation(fields: [levelId], references: [id])

  // Relaciones
  employmentContracts EmploymentContract[]

  @@index([orgId])
  @@index([levelId])
  @@map("positions")
}

// Empleado - Datos personales y perfil del empleado
model Employee {
  id              String    @id @default(cuid())
  employeeNumber  String?   // Número de empleado único en la org
  firstName       String
  lastName        String
  secondLastName  String?
  nifNie          String    // NIF/NIE
  email           String?
  phone           String?
  mobilePhone     String?
  address         String?
  city            String?
  postalCode      String?
  province        String?
  country         String    @default("ES")
  birthDate       DateTime?
  nationality     String?
  
  // Datos bancarios (cifrados)
  iban            String?   // Se cifrará a nivel de aplicación
  
  // Contacto de emergencia
  emergencyContactName  String?
  emergencyContactPhone String?
  emergencyRelationship String?
  
  // Estado laboral
  employmentStatus EmploymentStatus @default(PENDING_CONTRACT)
  
  // Metadatos
  photoUrl        String?
  notes           String?
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relación opcional con usuario del sistema
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  // Relaciones
  employmentContracts EmploymentContract[]
  documents          EmployeeDocument[]
  managedContracts   EmploymentContract[] @relation("ManagerSubordinates")
  managedDepartments Department[]         @relation("DepartmentManager")
  timeEntries        TimeEntry[]
  workdaySummaries   WorkdaySummary[]
  ptoBalances        PtoBalance[]
  ptoRequests        PtoRequest[]

  @@unique([orgId, employeeNumber]) // Número único por organización
  @@unique([orgId, nifNie])         // NIF único por organización
  @@index([orgId])
  @@index([email])
  @@map("employees")
}

// Contrato laboral - Datos contractuales del empleado
model EmploymentContract {
  id          String    @id @default(cuid())
  contractType String   // INDEFINIDO, TEMPORAL, PRACTICAS, etc.
  startDate   DateTime
  endDate     DateTime? // null para indefinidos
  weeklyHours Decimal   @db.Decimal(5,2) // Horas semanales pactadas
  workingDaysPerWeek Decimal? @default(5) @db.Decimal(3,1) // Días laborables por semana (4, 5, 6, etc.)
  grossSalary Decimal?  @db.Decimal(10,2) // Salario bruto anual
  
  // Metadatos
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relaciones
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  positionId String?
  position   Position? @relation(fields: [positionId], references: [id])

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  costCenterId String?
  costCenter   CostCenter? @relation(fields: [costCenterId], references: [id])

  // Responsable/Manager
  managerId String?
  manager   Employee? @relation("ManagerSubordinates", fields: [managerId], references: [id])

  @@index([orgId])
  @@index([employeeId])
  @@map("employment_contracts")
}

// Documentos del empleado
model EmployeeDocument {
  id          String   @id @default(cuid())
  kind        DocumentKind // Tipo de documento
  fileName    String   // Nombre original del archivo
  storageUrl  String   // URL en Azure Blob o almacén
  fileSize    Int      // Tamaño en bytes
  mimeType    String   // Tipo MIME
  version     Int      @default(1) // Versión del documento
  description String?  // Descripción opcional
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relaciones
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Usuario que subió el documento
  uploadedById String
  uploadedBy   User @relation(fields: [uploadedById], references: [id])

  @@index([orgId])
  @@index([employeeId])
  @@map("employee_documents")
}

// Tipos de documentos
enum DocumentKind {
  CONTRACT     // Contrato laboral
  PAYSLIP      // Nómina
  ID_DOCUMENT  // DNI/NIE
  SS_DOCUMENT  // Documento Seguridad Social
  CERTIFICATE  // Certificados (idiomas, formación, etc.)
  MEDICAL      // Documentos médicos
  OTHER        // Otros documentos
}

// Estados laborales del empleado
enum EmploymentStatus {
  PENDING_CONTRACT  // Pendiente de contrato
  ACTIVE           // Activo trabajando
  ON_LEAVE         // De baja/permiso
  VACATION         // Vacaciones
  SUSPENDED        // Suspendido
  TERMINATED       // Dado de baja
  RETIRED          // Jubilado
}

// ==================== SISTEMA DE CONTRASEÑAS TEMPORALES ====================

// Contraseñas temporales generadas para usuarios
model TemporaryPassword {
  id          String    @id @default(cuid())
  password    String    // Contraseña encriptada
  createdAt   DateTime  @default(now())
  usedAt      DateTime? // Cuando fue usada por primera vez
  expiresAt   DateTime  // Cuándo expira
  active      Boolean   @default(true)
  
  // Notas administrativas
  reason      String?   // Razón de la generación (ej: "Nuevo empleado", "Reset solicitado")
  notes       String?   // Notas adicionales del administrador
  
  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Usuario al que pertenece la contraseña
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Usuario que creó la contraseña temporal (admin/HR)
  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])
  
  @@index([userId])
  @@index([orgId])
  @@index([active])
  @@index([expiresAt])
  @@map("temporary_passwords")
}

// ==================== SISTEMA DE CALENDARIOS ====================

// Calendario organizacional (festivos, eventos corporativos)
model Calendar {
  id          String   @id @default(cuid())
  name        String   // "Festivos Nacionales 2024", "Festivos Barcelona 2024"
  description String?
  year        Int      // Año al que aplica
  calendarType CalendarType @default(NATIONAL_HOLIDAY)
  color       String   @default("#3b82f6") // Color hex para identificación visual
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relación opcional con centro de coste (para calendarios locales)
  costCenterId String?
  costCenter   CostCenter? @relation(fields: [costCenterId], references: [id])

  // Relaciones
  events CalendarEvent[]

  @@index([orgId])
  @@index([costCenterId])
  @@index([year])
  @@map("calendars")
}

// Eventos del calendario (festivos, cierres, eventos)
model CalendarEvent {
  id          String   @id @default(cuid())
  name        String   // "Día de Reyes", "Cierre de verano"
  description String?
  date        DateTime // Fecha del evento
  endDate     DateTime? // Para eventos de varios días
  eventType   CalendarEventType @default(HOLIDAY)
  isRecurring Boolean  @default(false) // Si se repite cada año
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación con calendario
  calendarId String
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId])
  @@index([date])
  @@map("calendar_events")
}

// Tipos de calendario
enum CalendarType {
  NATIONAL_HOLIDAY  // Festivos nacionales
  LOCAL_HOLIDAY     // Festivos locales por centro
  CORPORATE_EVENT   // Eventos corporativos
  CUSTOM           // Personalizado
}

// Tipos de eventos
enum CalendarEventType {
  HOLIDAY          // Festivo
  CLOSURE          // Cierre (oficina cerrada)
  EVENT            // Evento corporativo
  MEETING          // Reunión importante
  DEADLINE         // Fecha límite
  OTHER            // Otro
}

// ==================== SPRINT 2: SISTEMA DE FICHAJES ====================

// Terminal de fichaje (opcional - para fichaje desde terminales físicos)
model TimeClockTerminal {
  id          String   @id @default(cuid())
  name        String   // "Terminal Recepción", "Terminal Fábrica"
  code        String   // Código único del terminal
  location    String?  // Ubicación física
  ipAddress   String?  // IP del terminal
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relación opcional con centro de coste
  costCenterId String?
  costCenter   CostCenter? @relation(fields: [costCenterId], references: [id])

  // Relaciones
  timeEntries TimeEntry[]

  @@unique([orgId, code])
  @@index([orgId])
  @@index([costCenterId])
  @@map("time_clock_terminals")
}

// Registro individual de fichaje (entrada, salida, pausa)
model TimeEntry {
  id          String        @id @default(cuid())
  entryType   TimeEntryType // CLOCK_IN, CLOCK_OUT, BREAK_START, BREAK_END
  timestamp   DateTime      @default(now()) // Momento exacto del fichaje
  location    String?       // Geolocalización o ubicación
  notes       String?       // Notas opcionales
  ipAddress   String?       // IP desde donde se fichó
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Empleado que ficha
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Terminal desde el que se fichó (opcional)
  terminalId String?
  terminal   TimeClockTerminal? @relation(fields: [terminalId], references: [id])

  // Relación con el resumen del día
  workdayId String?
  workday   WorkdaySummary? @relation(fields: [workdayId], references: [id])

  @@index([orgId])
  @@index([employeeId])
  @@index([timestamp])
  @@index([entryType])
  @@index([workdayId])
  @@map("time_entries")
}

// Resumen consolidado de un día laboral
model WorkdaySummary {
  id                String   @id @default(cuid())
  date              DateTime // Fecha del día (sin hora)
  clockIn           DateTime? // Primera entrada del día
  clockOut          DateTime? // Última salida del día
  totalWorkedMinutes Decimal  @default(0) @db.Decimal(10,2) // Minutos trabajados totales (con decimales para segundos)
  totalBreakMinutes  Decimal  @default(0) @db.Decimal(10,2) // Minutos de pausa totales (con decimales para segundos)
  status            WorkdayStatus @default(IN_PROGRESS) // IN_PROGRESS, COMPLETED, INCOMPLETE
  notes             String?  // Notas administrativas
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Empleado
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Relaciones
  timeEntries TimeEntry[]

  @@unique([orgId, employeeId, date]) // Un resumen por empleado por día
  @@index([orgId])
  @@index([employeeId])
  @@index([date])
  @@index([status])
  @@map("workday_summaries")
}

// Tipos de fichaje
enum TimeEntryType {
  CLOCK_IN     // Entrada
  CLOCK_OUT    // Salida
  BREAK_START  // Inicio de pausa
  BREAK_END    // Fin de pausa
}

// Estados del día laboral
enum WorkdayStatus {
  IN_PROGRESS  // Día en curso (aún no ha fichado salida)
  COMPLETED    // Día completado correctamente
  INCOMPLETE   // Día incompleto (falta salida o hay inconsistencias)
  ABSENT       // Ausente (no fichó)
}

// ==================== SPRINT 3: SISTEMA DE VACACIONES (PTO) ====================

// Tipos de ausencia configurables (Vacaciones, Asuntos personales, Baja médica, etc.)
model AbsenceType {
  id              String   @id @default(cuid())
  name            String   // "Vacaciones", "Asuntos personales", "Baja médica"
  code            String   // "VACATION", "PERSONAL", "SICK_LEAVE"
  description     String?
  color           String   @default("#3b82f6") // Color para identificación visual
  isPaid          Boolean  @default(true) // Si es tiempo pagado o no
  requiresApproval Boolean @default(true) // Si requiere aprobación
  minDaysAdvance  Int      @default(0) // Días de anticipación requeridos
  affectsBalance  Boolean  @default(true) // Si descuenta del balance de PTO
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Relaciones
  ptoRequests PtoRequest[]

  @@unique([orgId, code]) // Código único por organización
  @@index([orgId])
  @@index([active])
  @@map("absence_types")
}

// Balance de días de PTO por empleado y año
model PtoBalance {
  id                String   @id @default(cuid())
  year              Int      // Año al que aplica el balance

  // Cálculo de días (con decimales para días medios)
  annualAllowance   Decimal  @db.Decimal(5,2) // Días asignados este año (puede ser proporcional)
  daysUsed          Decimal  @default(0) @db.Decimal(5,2) // Días ya usados (solicitudes aprobadas)
  daysPending       Decimal  @default(0) @db.Decimal(5,2) // Días en solicitudes pendientes
  daysAvailable     Decimal  @db.Decimal(5,2) // Disponibles = allowance - used - pending

  // Metadata para auditoría y cálculo proporcional
  calculationDate   DateTime @default(now())
  contractStartDate DateTime // Fecha de inicio del contrato para cálculo proporcional
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Empleado
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([orgId, employeeId, year]) // Un balance por empleado por año
  @@index([orgId])
  @@index([employeeId])
  @@index([year])
  @@map("pto_balances")
}

// Solicitudes de ausencia (PTO)
model PtoRequest {
  id          String           @id @default(cuid())

  // Fechas y días
  startDate   DateTime         // Fecha de inicio
  endDate     DateTime         // Fecha de fin
  workingDays Decimal          @db.Decimal(5,2) // Días hábiles calculados (excluyendo festivos y fines de semana)

  // Estado de la solicitud
  status      PtoRequestStatus @default(PENDING)

  // Información adicional
  reason      String?          // Motivo de la ausencia
  attachmentUrl String?        // URL del archivo adjunto (opcional)

  // Aprobación (UN solo aprobador)
  approverId        String?
  approver          User?    @relation("PtoApprover", fields: [approverId], references: [id])
  approvedAt        DateTime?
  approverComments  String?  // Comentarios del aprobador al aprobar

  // Rechazo
  rejectedAt        DateTime?
  rejectionReason   String?  // Motivo del rechazo

  // Cancelación
  cancelledAt       DateTime?
  cancellationReason String? // Motivo de la cancelación

  // Timestamps
  submittedAt DateTime @default(now()) // Cuando se envió la solicitud
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Empleado que solicita
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Tipo de ausencia
  absenceTypeId String
  absenceType   AbsenceType @relation(fields: [absenceTypeId], references: [id])

  // Relaciones
  notifications PtoNotification[]

  @@index([orgId])
  @@index([employeeId])
  @@index([approverId])
  @@index([status])
  @@index([startDate])
  @@index([submittedAt])
  @@map("pto_requests")
}

// Estados de solicitud de PTO
enum PtoRequestStatus {
  DRAFT          // Borrador (no enviada aún)
  PENDING        // Pendiente de aprobación
  APPROVED       // Aprobada
  REJECTED       // Rechazada
  CANCELLED      // Cancelada por el empleado
}

// Notificaciones del sistema (PTO y futuras funcionalidades)
model PtoNotification {
  id      String              @id @default(cuid())
  type    PtoNotificationType // Tipo de notificación
  title   String              // Título corto
  message String              // Mensaje descriptivo
  isRead  Boolean             @default(false)

  // Solicitud relacionada (opcional)
  ptoRequestId String?
  ptoRequest   PtoRequest? @relation(fields: [ptoRequestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Multi-tenancy
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Destinatario de la notificación
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([ptoRequestId])
  @@map("pto_notifications")
}

// Tipos de notificaciones
enum PtoNotificationType {
  PTO_SUBMITTED         // Nueva solicitud enviada (notificar aprobador)
  PTO_APPROVED          // Solicitud aprobada (notificar empleado)
  PTO_REJECTED          // Solicitud rechazada (notificar empleado)
  PTO_CANCELLED         // Solicitud cancelada (notificar aprobador)
  PTO_REMINDER          // Recordatorio de solicitud sin revisar
  DOCUMENT_UPLOADED     // Nuevo documento subido (futuro)
  SYSTEM_ANNOUNCEMENT   // Anuncio del sistema (futuro)
}

// ==================== PRÓXIMOS SPRINTS ====================
// Sprint 4: Añadir PayrollExport y configuraciones